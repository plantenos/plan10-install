#!@BINDIR@/bash
# Copyright (c) 2019 Plan 10 <plantenos@protonmail.com>
# All rights reserved.
# 
# This file is part of Plan 10. It is subject to the license terms in
# the LICENSE file found in the top-level directory of this
# distribution.
#
# This file may not be copied, modified, propagated, or distributed
# except according to the terms contained in the LICENSE file.
#
# Assumptions:
#  1) User has partitioned, formatted, and mounted partitions on a directory
#  2) Network is functional
#  3) A valid mirror appears in /etc/pacman.d/mirrorlist
#

##		Check if the functions file exists
sourcing(){
	
	local list
	
	for list in /etc/plan10/install.conf /usr/lib/plan10/{util.sh,install.sh}; do
		if [[ -f "${list}" ]]; then
			source "${list}"
		else
			out_error "Missing file : ${list}"
			exit	
		fi
	done
	
	unset list
}
sourcing

shellopts_save
shellopts_set_unset "extglob" 0

##		Clean before exit

trap "clean_install" QUIT KILL STOP INT TERM 

##		Must be root user 

if (( EUID != 0 )) || [[ -z "${SUDO_USER}" ]] || [[ "${SUDO_USER}" == "root" ]]; then

	die "You must run this script with root privileges by sudo command as normal user" "clean_install" 
fi

##		Let's go

##		Update package or not

main_update(){
	
	local r=0
	
	if [[ "$UPDATE_INS" == "yes" ]]; then 
		
		dg_yesno "Installer Update" "$dgm_update_install"
		
		if (( ! $? )); then
			pac_update "plan10-install" "/var/lib/plan10/plan10-install" "$GIT_ADDR" "$BRANCH" || die " Impossible to update" "clean_install"
			#sourcing
			sed -i "s,^UPDATE_INS=.*$,UPDATE_INS=\"no\"," "${CONFIG}"
			r=1
		fi
	fi
	if [[ "$UPDATE_TPL" == "yes" ]]; then 
	
		dg_yesno "Installer Update" "$dgm_update_install_themes"

		if (( ! $? )); then
			pac_update "plan10-install-themes" "/var/lib/plan10/plan10-install-themes" "$GIT_ADDR_THEMES" "$BRANCH_THEMES" || die " Impossible to update" "clean_install"
			sed -i "s,^UPDATE_TPL=.*$,UPDATE_TPL=\"no\"," "${CONFIG}"
		fi
	fi
	
	if (( "${r}" )); then
		dg_info "$dgm_default_title" "$dgm_update"
		tput cnorm
		exit 0
	fi
	unset r
}

check_database(){
	if [[ ! -e "/var/lib/pacman/sync/piocore.db" ]];then
		pacman -Syy || die "unable to synchronize pacman database" "clean_install"
	fi
}

hot_fix()
{
	if [[ -d /run/archiso/sfs/airootfs/ ]];then
		remote=$(expac -S %v glibc)
		local=$(expac -Q %v glibc)
		if vercmp ${remote} ${local} >&/dev/null; then
			out_action "Updating glibc package"
			pacman -S glibc --noconfirm --needed
		fi
	fi
}

check_screen_size() {
	
	if [[ $(tput cols) -lt 80 ]];then
		die "The size of the screen is too small, please increase it and try again" "clean_install"
	fi
	
}

check_screen_size

if [[ "$NETWORKCHECK" == "yes" ]]; then
	check_network
	sed -i "s,^NETWORKCHECK=.*$,NETWORKCHECK=\"no\"," "${CONFIG}"
fi
check_database
main_update
hot_fix
dg_info "Welcome to the plan10 installer" "$dgm_welcome"
if [[ "$KEYBOARDCHECK" == "yes" ]]; then
	set_keymap
	sed -i "s,^KEYBOARDCHECK=.*$,KEYBOARDCHECK=\"no\"," "${CONFIG}"
fi
main_menu
